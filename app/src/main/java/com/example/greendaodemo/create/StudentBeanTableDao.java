package com.example.greendaodemo.create;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.greendaodemo.table.StudentBeanTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STUDENT_BEAN_TABLE".
*/
public class StudentBeanTableDao extends AbstractDao<StudentBeanTable, String> {

    public static final String TABLENAME = "STUDENT_BEAN_TABLE";

    /**
     * Properties of entity StudentBeanTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property SId = new Property(0, String.class, "sId", true, "S_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Age = new Property(2, int.class, "age", false, "AGE");
        public final static Property Gender = new Property(3, String.class, "gender", false, "GENDER");
    }


    public StudentBeanTableDao(DaoConfig config) {
        super(config);
    }
    
    public StudentBeanTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STUDENT_BEAN_TABLE\" (" + //
                "\"S_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: sId
                "\"NAME\" TEXT," + // 1: name
                "\"AGE\" INTEGER NOT NULL ," + // 2: age
                "\"GENDER\" TEXT);"); // 3: gender
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STUDENT_BEAN_TABLE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, StudentBeanTable entity) {
        stmt.clearBindings();
 
        String sId = entity.getSId();
        if (sId != null) {
            stmt.bindString(1, sId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getAge());
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, StudentBeanTable entity) {
        stmt.clearBindings();
 
        String sId = entity.getSId();
        if (sId != null) {
            stmt.bindString(1, sId);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getAge());
 
        String gender = entity.getGender();
        if (gender != null) {
            stmt.bindString(4, gender);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public StudentBeanTable readEntity(Cursor cursor, int offset) {
        StudentBeanTable entity = new StudentBeanTable( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // sId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getInt(offset + 2), // age
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // gender
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, StudentBeanTable entity, int offset) {
        entity.setSId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAge(cursor.getInt(offset + 2));
        entity.setGender(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(StudentBeanTable entity, long rowId) {
        return entity.getSId();
    }
    
    @Override
    public String getKey(StudentBeanTable entity) {
        if(entity != null) {
            return entity.getSId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(StudentBeanTable entity) {
        return entity.getSId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
